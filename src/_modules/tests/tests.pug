
include ../../../unit-tests/height/insideHeight/insideHeight

.breakpoints
  h2 Breakpoints
  .breakpoints__size.-minimum
  .breakpoints__size.-small
  .breakpoints__size.-medium
  .breakpoints__size.-large
  .breakpoints__size.-page

h2#tests Tests

-
  var headings = {
    'Width' : 'width',
    'Height' : 'height',
    'Ratio' : 'ratio',
    'Media statements' : 'media',
    'Plus statements' : 'plus',
    'Or statements' : 'or',
  };

mixin menuItem(heading, value)
  -
    var isObj = typeof value === 'object';
    var href = `#${isObj ? value.id : value}`;

  li: a(href=href, style='color: #000;')= heading
    if isObj
      ol
        each subId, subHeading in value.list
          +menuItem(subHeading, subId)

ol
  each id, heading in headings
    +menuItem(heading, id)



//- ======
//- WIDTH
//- ======
h3#width Width

.tests
  //-max
  +demo({
    html: `
.test.-max
`,
    scss: `
@include mq(max, $BP-medium) {
  background: $green;
}`,
  })

  //-maxWidth
  +demo({
    html: `
.test.-maxWidth
`,
    scss: `
@include mq(max-width, $BP-medium) {
  background: $green;
}`,
  })

  //-maxVar
  +demo({
    html: `
.test.-maxVar
`,
    scss: `
$MQ-maxVar: (max, $BP-medium);
@include mq($MQ-maxVar) {
  background: $green;
}`,
  })

  //-min
  +demo({
    html: `
.test.-min
`,
    scss: `
@include mq(min, $BP-medium) {
  background: $green;
}`,
  })

  //-minWidth
  +demo({
    html: `
.test.-minWidth
`,
    scss: `
@include mq(min-width, $BP-medium) {
  background: $green;
}`,
  })

  //-minVar
  +demo({
    html: `
.test.-minVar
`,
    scss: `
$MQ-minVar: (min, $BP-medium);
@include mq($MQ-minVar) {
  background: $green;
}`,
  })

  //-inside
  +demo({
    html: `
.test.-inside
`,
    scss: `
@include mq(inside, $BP-medium, $BP-small) {
  background: $green;
}`,
  })

  //-insideWidth
  +demo({
    html: `
.test.-insideWidth
`,
    scss: `
@include mq(inside-width, $BP-small, $BP-medium) {
  background: $green;
}`,
  })

  //-insideVar
  +demo({
    html: `
.test.-insideVar
`,
    scss: `
$MQ-insideVar: (inside, $BP-medium, $BP-small);
@include mq($MQ-insideVar) {
  background: $green;
}`,
  })

  //-outside
  +demo({
    html: `
.test.-outside
`,
    scss: `
@include mq(outside, $BP-medium, $BP-small) {
  background: $green;
}`,
  })

  //-outsideWidth
  +demo({
    html: `
.test.-outsideWidth
`,
    scss: `
@include mq(outside-width, $BP-small, $BP-medium) {
  background: $green;
}`,
  })

  //-outsideVar
  +demo({
    html: `
.test.-outsideVar
`,
    scss: `
$MQ-outsideVar: (outside, $BP-medium, $BP-small);
@include mq($MQ-outsideVar) {
  background: $green;
}`,
  })

  //- ======
  //- HEIGHT
  //- ======
  h3#height Height

  //-maxHeight
  +demo({
    html: `
.test.-maxHeight
`,
    scss: `
@include mq(max-height, $BP-medium) {
  background: $green;
}`,
  })

  //-maxHeightVar
  +demo({
    html: `
.test.-maxHeightVar
`,
    scss: `
$MQ-maxHeightVar: (max-height, $BP-medium);
@include mq($MQ-maxHeightVar) {
  background: $green;
}`,
  })

  //-minHeight
  +demo({
    html: `
.test.-minHeight
`,
    scss: `
@include mq(min-height, $BP-medium) {
  background: $green;
}`,
  })

  //-minHeightVar
  +demo({
    html: `
.test.-minHeightVar
`,
    scss: `
$MQ-minHeightVar: (min-height, $BP-medium);
@include mq($MQ-minHeightVar) {
  background: $green;
}`,
  })

  +insideHeight

  //-insideHeightVar
  +demo({
    html: `
.test.-insideHeightVar
`,
    scss: `
$MQ-insideHeightVar: (inside-height, $BP-small, $BP-medium);
@include mq($MQ-insideHeightVar) {
  background: $green;
}`,
  })

  //-outsideHeight
  +demo({
    html: `
.test.-outsideHeight
`,
    scss: `
@include mq(outside-height, $BP-small, $BP-medium) {
  background: $green;
}`,
  })

  //-outsideHeightVar
  +demo({
    html: `
.test.-outsideHeightVar
`,
    scss: `
$MQ-outsideHeightVar: (outside-height, $BP-small, $BP-medium);
@include mq($MQ-outsideHeightVar) {
  background: $green;
}`,
  })


  //- =====
  //- RATIO
  //- =====
  h3#ratio Ratio

  //-ratio
  +demo({
    html: `
.test.-ratio
`,
    scss: `
@include mq(ratio, "2 / 1") {
  background: $green;
}`,
  })

  //-ratioVar
  +demo({
    html: `
.test.-ratioVar
`,
    scss: `
$MQ-ratioVar: (ratio, "2 / 1");
@include mq($MQ-ratioVar) {
  background: $green;
}`,
  })

  //-minRatio
  +demo({
    html: `
.test.-minRatio
`,
    scss: `
@include mq(min-ratio, "2 / 1") {
  background: $green;
}`,
  })

  //-minRatioVar
  +demo({
    html: `
.test.-minRatioVar
`,
    scss: `
$MQ-minRatioVar: (min-ratio, "2 / 1");
@include mq($MQ-minRatioVar) {
  background: $green;
}`,
  })

  //-maxRatio
  +demo({
    html: `
.test.-maxRatio
`,
    scss: `
@include mq(max-ratio, "2 / 1") {
  background: $green;
}`,
  })

  //-maxRatioVar
  +demo({
    html: `
.test.-maxRatioVar
`,
    scss: `
$MQ-maxRatioVar: (max-ratio, "2 / 1");
@include mq($MQ-maxRatioVar) {
  background: $green;
}`,
  })

  //-insideRatio
  +demo({
    html: `
.test.-insideRatio
`,
    scss: `
@include mq(inside-ratio, "2 / 1", "1 / 1") {
  background: $green;
}`,
  })

  //-insideRatioVar
  +demo({
    html: `
.test.-insideRatioVar
`,
    scss: `
$MQ-insideRatioVar: (inside-ratio, "2 / 1", "1 / 1");
@include mq($MQ-insideRatioVar) {
  background: $green;
}`,
  })

  //-outsideRatio
  +demo({
    html: `
.test.-outsideRatio
`,
    scss: `
@include mq(outside-ratio, "2 / 1", "1 / 1") {
  background: $green;
}`,
  })

  //-outsideRatioVar
  +demo({
    html: `
.test.-outsideRatioVar
`,
    scss: `
$MQ-outsideRatioVar: (outside-ratio, "2 / 1", "1 / 1");
@include mq($MQ-outsideRatioVar) {
  background: $green;
}`,
  })

  p A Note on these next three examples. If you set your screen size to exactly 800px width by 400px height, you will see that every single ratio so far returns true. The following 2 examples show a work around for this 1px sour spot issue. FYI, using this technique will make the media query incompatible with Sass media query nesting. #[code not] produces unexpected results when nesting media queries in Sass.

  //-exactRatioWorkAround1
  +demo({
    html: `
.test.-exactRatioWorkAround1
`,
    scss: `
//equivalent to (min-ratio, '2 / 1') but without the 1px sour spot
$MQ-exactRatioWorkAround1: (max-ratio, '2 / 1', 'not');
@include mq($MQ-exactRatioWorkAround1) {
  background: $green;
}`,
  })

  //-exactRatioWorkAround2
  +demo({
    html: `
.test.-exactRatioWorkAround2
`,
    scss: `
//Exactly the same as above but formatted differently
$MQ-exactRatioWorkAround2: 'not' plus (max-ratio, '2 / 1');
@include mq($MQ-exactRatioWorkAround2) {
  background: $green;
}`,
  })

  //-exactRatioWorkAround3
  +demo({
    html: `
.test.-exactRatioWorkAround3
`,
    scss: `
//The same again this time inline
@include mq(max-ratio, '2 / 1', 'not') {
  background: $green;
}
`,
  })


  //- =====
  //- MEDIA
  //- =====
  h3#media Media statements

  //-simpleMedia
  +demo({
    html: `
.test.-simpleMedia
`,
    scss: `
@include mq(min, $BP-medium, 'screen') {
  background: $green;
}`,
  })

  //-notMedia
  +demo({
    html: `
.test.-notMedia
`,
    scss: `
@include mq(min, $BP-medium, 'not') {
  background: $green;
}`,
  })

  //-onlyMedia
  +demo({
    html: `
.test.-onlyMedia
`,
    scss: `
@include mq('screen') {
  background: $green;
}`,
  })


  //- =====
  //- PLUS
  //- =====
  h3#plus #[code plus] statements

  //-simplePlus
  +demo({
    html: `
.test.-simplePlus
`,
    scss: `
$MQ-simplePlus: (min-width, $BP-medium) plus (min-height, 600px);
@include mq($MQ-simplePlus) {
  background: $green;
}`,
  })

  //-inlinePlus
  +demo({
    html: `
.test.-inlinePlus
`,
    scss: `
//inline plus statement
@include mq((min-width, $BP-medium) plus (min-height, 600px)) {
  background: $green;
}`,
  })

  //-mediaOnlyPlus
  +demo({
    html: `
.test.-mediaOnlyPlus
`,
    scss: `
@include mq('screen' plus (min, $BP-medium)) {
  background: $green;
}`,
  })

  //-complexPlus
  +demo({
    html: `
.test.-complexPlus
`,
    scss: `
//note that 'print' appplies to the full plus statement
$MQ-complexPlus: (inside-width, $BP-small, $BP-medium, 'print') plus (inside-ratio, '2/1', '1/1');
@include mq($MQ-complexPlus) {
  background: $green;
}`,
  })

  //-ignoredMediaType
  +demo({
    html: `
.test.-ignoredMediaType
`,
    scss: `
//The media type in the second plus statement is ignored
//Only media types in the first definition are honoured in a plus statement
$MQ-ignoredMediaType: (inside-width, $BP-small, $BP-medium) plus (inside-ratio, '2/1', '1/1', 'print');
@include mq($MQ-ignoredMediaType) {
  background: $green;
}`,
  })

  //-multiPlus
  +demo({
    html: `
.test.-multiPlus
`,
    scss: `
$MQ-multiPlus: (
  ('screen') plus
  (min-width, $BP-medium) plus
  (min-height, 400px) plus
  (inside, $BP-small, $BP-large) plus
  (inside-ratio, '2/1', '1/1')
);

@include mq($MQ-multiPlus) {
  background: $green;
}`,
  })


  //- =====
  //- OR
  //- =====
  h3#or #[code or] statements

  //-simpleOr
  +demo({
    html: `
.test.-simpleOr
`,
    scss: `
$MQ-simpleOr: (
  (min-width, $BP-medium),
  (min-height, 800px)
);
@include mq($MQ-simpleOr) {
  background: $green;
}`,
  })

  //-complexOr
  +demo({
    html: `
.test.-complexOr
`,
    scss: `
$MQ-complexOr: (
  (inside, $BP-small, $BP-medium, 'screen'),
  (outside-ratio, '2/1', '1/1')
);
@include mq($MQ-complexOr) {
  background: $green;
}`,
  })

  //-multiOr
  +demo({
    html: `
.test.-multiOr
`,
    scss: `
$MQ-multiOr: (
  (min-width, $BP-medium, 'screen'),
  (min-height, 800px),
  (inside, $BP-small, $BP-large),
  (inside-ratio, '2/1', '1/1'),
  ('print')
);
@include mq($MQ-multiOr) {
  background: $green;
}`,
  })

  //-orPlusCombo
  +demo({
    html: `
.test.-orPlusCombo
`,
    scss: `
$MQ-orPlusCombo: (
  (min-width, $BP-medium, 'screen') plus (min-height, 800px),
  'screen' plus (inside, $BP-small, $BP-large) plus (inside-ratio, '2/1', '1/1')
);
@include mq($MQ-orPlusCombo) {
  background: $green;
}`,
  })
